syntax = "proto3";

package saser.strecku.v1;

option go_package = "github.com/Saser/strecku/api/v1;pb";
option java_package = "se.saser.strecku.v1";
option java_multiple_files = true;
option java_outer_classname = "StreckUProto";

// StreckU is a service for buying things on credit.
service StreckU {
  // GetUser gets a single user.
  rpc GetUser(GetUserRequest) returns (User);

  // ListUsers lists users.
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);

  // CreateUser creates a new user.
  rpc CreateUser(CreateUserRequest) returns (User);

  // GetStore gets a single store.
  rpc GetStore(GetStoreRequest) returns (Store);

  // ListStores lists stores.
  rpc ListStores(ListStoresRequest) returns (ListStoresResponse);

  // CreateStore creates a new store.
  rpc CreateStore(CreateStoreRequest) returns (Store);
}

// User represents a user in the system.
message User {
  // name is the resource name of the user.
  // Format: users/{user}
  // Output only.
  string name = 1;

  // email_address is the email address of the user.
  // The email address is unique among all users.
  // Required.
  string email_address = 2;

  // display_name is the name of the user as it would be displayed to a human.
  // Required.
  string display_name = 3;
}

// Store represents a store in the system.
message Store {
  // name is the resource name of the store.
  // Format: stores/{store}
  // Output only.
  string name = 1;

  // display_name is the name of the store as it would be displayed to a human.
  // Required.
  string display_name = 2;
}

// Membership represents one instance of a many-to-many relation between users
// and stores, meaning that a user is a member of a store.
message Membership {
  // name is the resource name of the membership.
  // Format: memberships/{membership}
  // Output only.
  string name = 1;

  // user is the resource name of the user.
  // Format: users/{user}
  string user = 2;

  // store is the resource name of the store.
  // Format: stores/{store}
  string store = 3;

  // administrator is true if the user is an administrator of the store.
  bool administrator = 4;

  // discount is true if the user has a discount in the store.
  bool discount = 5;
}

// Product represents a product available for purchase in a store.
// Products are subresources of stores.
message Product {
  // name is the resource name of the product.
  // Format: stores/{store}/products/{product}
  // Output only.
  string name = 1;

  // parent is the resource name of the store owning this product.
  // Format: stores/{store}
  // Output only.
  string parent = 2;

  // display_name contains the name of this product as it would be displayed to
  // a human.
  // Required.
  string display_name = 3;

  // full_price_cents contains the price of this product in cents before
  // applying a discount. It must be a non-positive amount.
  // Required.
  int64 full_price_cents = 4;

  // discounted_price_cents contains the price of this product in cents after
  // applying a discount, if any. It must be a non-positive amount. It must be
  // of equal or smaller magnitude compared to full_price_cents.
  // Required.
  int64 discount_price_cents = 5;
}

// Purchase represents a transaction where a user increases their debt towards a
// store. Several things can be bought in a single purchase; see the inline
// message Line for more details.
message Purchase {
  // name is the resource name of the purchase.
  // Format: purchases/{purchase}
  // Required.
  string name = 1;

  // user is the resource name of the user making the purchase.
  // Format: users/{user}
  // Required.
  string user = 2;

  // store is the resource name of the store in which the purchase is made.
  // Format: stores/{store}
  // Required.
  string store = 3;

  // Line represents a single "order line" in the purchase. Each line contains
  // information about what is bought, how many of it, and what price each unit
  // has.
  message Line {
    // description contains a human-readable description of what is being
    // bought. Typically, this is the name of a product at the time of purchase.
    // Required.
    string description = 1;

    // quantity is the number of units that is being purchased. It must be
    // positive.
    // Required.
    int32 quantity = 2;

    // price_cents contains the price in cents of each unit. It must be
    // non-positive.
    // Required.
    int64 price_cents = 3;

    // product contains the resource name of the product that this line
    // represents, if any. The store owning the product must be the same as the
    // store in which this purchase is made.
    // Format: stores/{store}/products/{store}
    // Optional.
    string product = 4;
  }

  // lines contains the lines of this purchase. There must be at least one line
  // in each purchase.
  // Required.
  repeated Line lines = 4;
}

// GetUserRequest is the request message for GetUser.
message GetUserRequest {
  // name is the resource name of the user to get.
  // Format: users/{user}
  // Required.
  string name = 1;
}

// ListUsersRequest is the request message for ListUsers.
//
// (-- api-linter: core::0132::request-parent-required=disabled
//     aip.dev/not-precedent: Users are top-level resources. --)
message ListUsersRequest {
  // page_size is the maximum number of users to return.
  // If unspecified, the server will choose a suitable number.
  int32 page_size = 1;

  // page_token contains an opaque string used to get the next page of
  // results. It is usually provided by the previous call to ListUsers.
  // If unspecified, the first page will be returned.
  string page_token = 2;
}

// ListUsersResponse is the response message for ListUsers.
message ListUsersResponse {
  // users contains the page of users.
  repeated User users = 1;

  // next_page_token contains an opaque string used to get the next page of
  // results. Provide this in a subsequent call to ListUsers.
  // If this field is empty, there are no more pages.
  string next_page_token = 2;
}

// CreateUserRequest is the request message for CreateUser.
//
// (-- api-linter: core::0133::request-parent-required=disabled
//     aip.dev/not-precedent: Users are top-level resources. --)
message CreateUserRequest {
  // user is the user to be created.
  // Required.
  User user = 1;

  // password contains the password this user should use to authenticate.
  // Required.
  //
  // (-- api-linter: core::0133::request-unknown-fields=disabled
  //     aip.dev/not-precedent: A password is required for each user. --)
  string password = 2;
}

// GetStoreRequest is the request message for GetStore.
message GetStoreRequest {
  // name is the resource name of the store to get.
  // Format: stores/{store}
  // Required.
  string name = 1;
}

// ListStoresRequest is the request message for ListStores.
//
// (-- api-linter: core::0132::request-parent-required=disabled
//     aip.dev/not-precedent: Stores are top-level resources. --)
message ListStoresRequest {
  // page_size is the maximum number of stores to return.
  // If unspecified, the server will choose a suitable number.
  int32 page_size = 1;

  // page_token contains an opaque string used to get the next page of
  // results. It is usually provided by the previous call to ListStores.
  // If unspecified, the first page will be returned.
  string page_token = 2;
}

// ListStoresResponse is the response message for ListStores.
message ListStoresResponse {
  // stores contains the page of stores.
  repeated Store stores = 1;

  // next_page_token contains an opaque string used to get the next page of
  // results. Provide this in a subsequent call to ListStores.
  // If this field is empty, there are no more pages.
  string next_page_token = 2;
}

// CreateStoreRequest is the request message for CreateStore.
//
// (-- api-linter: core::0133::request-parent-required=disabled
//     aip.dev/not-precedent: Stores are top-level resources. --)
message CreateStoreRequest {
  // store is the store to be created.
  // Required.
  Store store = 1;
}
