syntax = "proto3";

package saser.strecku.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

option go_package = "github.com/Saser/strecku/api/v1;pb";
option java_package = "se.saser.strecku.v1";
option java_multiple_files = true;
option java_outer_classname = "StreckUProto";

// StreckU is a service for buying things on credit.
service StreckU {
  // GetUser gets a single user.
  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/v1/{name=users/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // ListUsers lists users.
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);

  // CreateUser creates a new user.
  rpc CreateUser(CreateUserRequest) returns (User);

  // UpdateUser updates a single user.
  rpc UpdateUser(UpdateUserRequest) returns (User);

  // DeleteUser deletes a user.
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty);

  // GetStore gets a single store.
  rpc GetStore(GetStoreRequest) returns (Store);

  // ListStores lists stores.
  rpc ListStores(ListStoresRequest) returns (ListStoresResponse);

  // CreateStore creates a new store.
  rpc CreateStore(CreateStoreRequest) returns (Store);

  // UpdateStore updates a single store.
  rpc UpdateStore(UpdateStoreRequest) returns (Store);

  // DeleteStore deletes a store.
  rpc DeleteStore(DeleteStoreRequest) returns (google.protobuf.Empty);

  // GetMembership gets a single membership.
  rpc GetMembership(GetMembershipRequest) returns (Membership);

  // ListMemberships lists memberships.
  rpc ListMemberships(ListMembershipsRequest) returns (ListMembershipsResponse);

  // CreateMembership creates a new membership.
  rpc CreateMembership(CreateMembershipRequest) returns (Membership);

  // UpdateMembership updates a single membership.
  rpc UpdateMembership(UpdateMembershipRequest) returns (Membership);

  // DeleteMembership deletes a membership.
  rpc DeleteMembership(DeleteMembershipRequest) returns (google.protobuf.Empty);

  // GetProduct gets a single product.
  rpc GetProduct(GetProductRequest) returns (Product);

  // ListProducts lists products.
  rpc ListProducts(ListProductsRequest) returns (ListProductsResponse);

  // CreateProduct creates a new product.
  rpc CreateProduct(CreateProductRequest) returns (Product);

  // UpdateProduct updates a single product.
  rpc UpdateProduct(UpdateProductRequest) returns (Product);

  // DeleteProduct deletes a product.
  rpc DeleteProduct(DeleteProductRequest) returns (google.protobuf.Empty);

  // GetPurchase gets a single purchase.
  rpc GetPurchase(GetPurchaseRequest) returns (Purchase);

  // ListPurchases lists purchases.
  rpc ListPurchases(ListPurchasesRequest) returns (ListPurchasesResponse);

  // CreatePurchase creates a new purchase.
  rpc CreatePurchase(CreatePurchaseRequest) returns (Purchase);

  // UpdatePurchase updates a single purchase.
  rpc UpdatePurchase(UpdatePurchaseRequest) returns (Purchase);

  // DeletePurchase deletes a purchase.
  rpc DeletePurchase(DeletePurchaseRequest) returns (google.protobuf.Empty);

  // GetPayment gets a single payment.
  rpc GetPayment(GetPaymentRequest) returns (Payment);

  // ListPayments lists payments.
  rpc ListPayments(ListPaymentsRequest) returns (ListPaymentsResponse);

  // CreatePayment creates a new payment.
  rpc CreatePayment(CreatePaymentRequest) returns (Payment);

  // UpdatePayment updates a single payment.
  rpc UpdatePayment(UpdatePaymentRequest) returns (Payment);

  // DeletePayment deletes a payment.
  rpc DeletePayment(DeletePaymentRequest) returns (google.protobuf.Empty);
}

// User represents a user in the system.
message User {
  // name is the resource name of the user.
  // Format: users/{user}
  // Output only.
  string name = 1;

  // email_address is the email address of the user.
  // The email address is unique among all users.
  // Required.
  string email_address = 2;

  // display_name is the name of the user as it would be displayed to a human.
  // Required.
  string display_name = 3;
}

// Store represents a store in the system.
message Store {
  // name is the resource name of the store.
  // Format: stores/{store}
  // Output only.
  string name = 1;

  // display_name is the name of the store as it would be displayed to a human.
  // Required.
  string display_name = 2;
}

// Membership represents one instance of a many-to-many relation between users
// and stores, meaning that a user is a member of a store.
message Membership {
  // name is the resource name of the membership.
  // Format: stores/{store}/memberships/{membership}
  // Output only.
  string name = 1;

  // user is the resource name of the user.
  // Format: users/{user}
  string user = 2;

  // administrator is true if the user is an administrator of the store.
  bool administrator = 3;

  // discount is true if the user has a discount in the store.
  bool discount = 4;
}

// Product represents a product available for purchase in a store.
// Products are subresources of stores.
message Product {
  // name is the resource name of the product.
  // Format: stores/{store}/products/{product}
  // Output only.
  string name = 1;

  // display_name contains the name of this product as it would be displayed to
  // a human.
  // Required.
  string display_name = 2;

  // full_price_cents contains the price of this product in cents before
  // applying a discount. It must be a non-positive amount.
  // Required.
  int64 full_price_cents = 3;

  // discounted_price_cents contains the price of this product in cents after
  // applying a discount, if any. It must be a non-positive amount. It must be
  // of equal or smaller magnitude compared to full_price_cents.
  // Required.
  int64 discount_price_cents = 4;
}

// Purchase represents a transaction where a user increases their debt towards a
// store. Several things can be bought in a single purchase; see the inline
// message Line for more details.
message Purchase {
  // name is the resource name of the purchase.
  // Format: stores/{store}/purchases/{purchase}
  // Required.
  string name = 1;

  // user is the resource name of the user making the purchase.
  // Format: users/{user}
  // Required.
  string user = 2;

  // Line represents a single "order line" in the purchase. Each line contains
  // information about what is bought, how many of it, and what price each unit
  // has.
  message Line {
    // description contains a human-readable description of what is being
    // bought. Typically, this is the name of a product at the time of purchase.
    // Required.
    string description = 1;

    // quantity is the number of units that is being purchased. It must be
    // positive.
    // Required.
    int32 quantity = 2;

    // price_cents contains the price in cents of each unit. It must be
    // non-positive.
    // Required.
    int64 price_cents = 3;

    // product contains the resource name of the product that this line
    // represents, if any. The store owning the product must be the same as the
    // store in which this purchase is made.
    // Format: stores/{store}/products/{store}
    // Optional.
    string product = 4;
  }

  // lines contains the lines of this purchase. There must be at least one line
  // in each purchase.
  // Required.
  repeated Line lines = 3;
}

// Payment represents a transaction where a user decreases their debt towards a
// store.
message Payment {
  // name is the resource name of the payment.
  // Format: stores/{store}/payments/{payment}
  // Required.
  string name = 1;

  // user is the resource name of the user making the payment.
  // Format: users/{user}
  // Required.
  string user = 2;

  // description contains a human-readable description of the payment.
  // Optional.
  string description = 3;

  // amount_cents contains the amount paid in cents. It must be non-negative.
  // Required.
  int64 amount_cents = 4;
}

// GetUserRequest is the request message for GetUser.
message GetUserRequest {
  // name is the resource name of the user to get.
  // Format: users/{user}
  // Required.
  string name = 1;
}

// ListUsersRequest is the request message for ListUsers.
//
// (-- api-linter: core::0132::request-parent-required=disabled
//     aip.dev/not-precedent: Users are top-level resources. --)
message ListUsersRequest {
  // page_size is the maximum number of users to return.
  // If unspecified, the server will choose a suitable number.
  int32 page_size = 1;

  // page_token contains an opaque string used to get the next page of
  // results. It is usually provided by the previous call to ListUsers.
  // If unspecified, the first page will be returned.
  string page_token = 2;
}

// ListUsersResponse is the response message for ListUsers.
message ListUsersResponse {
  // users contains the page of users.
  repeated User users = 1;

  // next_page_token contains an opaque string used to get the next page of
  // results. Provide this in a subsequent call to ListUsers.
  // If this field is empty, there are no more pages.
  string next_page_token = 2;
}

// CreateUserRequest is the request message for CreateUser.
//
// (-- api-linter: core::0133::request-parent-required=disabled
//     aip.dev/not-precedent: Users are top-level resources. --)
message CreateUserRequest {
  // user is the user to be created.
  // Required.
  User user = 1;

  // password contains the password this user should use to authenticate.
  // Required.
  //
  // (-- api-linter: core::0133::request-unknown-fields=disabled
  //     aip.dev/not-precedent: A password is required for each user. --)
  string password = 2;
}

// UpdateUserRequest is the request message for UpdateUser.
message UpdateUserRequest {
  // user is the updated user. The `name` field will be used to identify which
  // user to updated.
  // Required.
  User user = 1;

  // update_mask contains the field mask specifying which fields to update. An
  // empty field mask will cause the entire resource to be updated.
  // Optional.
  google.protobuf.FieldMask update_mask = 2;
}

// DeleteUserRequest is the request message for DeleteUser.
message DeleteUserRequest {
  // name specifies the resource name of the user to delete.
  // Format: users/{user}
  // Required.
  string name = 1;

  // force should be set to true if any associated resources (memberships,
  // purchases, etc) should also be deleted. If associated resources exist, and
  // force is false, the request will fail.
  bool force = 2;
}

// GetStoreRequest is the request message for GetStore.
message GetStoreRequest {
  // name is the resource name of the store to get.
  // Format: stores/{store}
  // Required.
  string name = 1;
}

// ListStoresRequest is the request message for ListStores.
//
// (-- api-linter: core::0132::request-parent-required=disabled
//     aip.dev/not-precedent: Stores are top-level resources. --)
message ListStoresRequest {
  // page_size is the maximum number of stores to return.
  // If unspecified, the server will choose a suitable number.
  int32 page_size = 1;

  // page_token contains an opaque string used to get the next page of
  // results. It is usually provided by the previous call to ListStores.
  // If unspecified, the first page will be returned.
  string page_token = 2;
}

// ListStoresResponse is the response message for ListStores.
message ListStoresResponse {
  // stores contains the page of stores.
  repeated Store stores = 1;

  // next_page_token contains an opaque string used to get the next page of
  // results. Provide this in a subsequent call to ListStores.
  // If this field is empty, there are no more pages.
  string next_page_token = 2;
}

// CreateStoreRequest is the request message for CreateStore.
//
// (-- api-linter: core::0133::request-parent-required=disabled
//     aip.dev/not-precedent: Stores are top-level resources. --)
message CreateStoreRequest {
  // store is the store to be created.
  // Required.
  Store store = 1;
}

// UpdateStoreRequest is the request message for UpdateStore.
message UpdateStoreRequest {
  // store is the updated store. The `name` field will be used to identify which
  // store to updated.
  // Required.
  Store store = 1;

  // update_mask contains the field mask specifying which fields to update. An
  // empty field mask will cause the entire resource to be updated.
  // Optional.
  google.protobuf.FieldMask update_mask = 2;
}

// DeleteStoreRequest is the request message for DeleteStore.
message DeleteStoreRequest {
  // name specifies the resource name of the store to delete.
  // Format: stores/{store}
  // Required.
  string name = 1;

  // force should be set to true if any associated resources (memberships,
  // purchases, etc) should also be deleted. If associated resources exist, and
  // force is false, the request will fail.
  bool force = 2;
}

// GetMembershipRequest is the request message for GetMembership.
message GetMembershipRequest {
  // name is the resource name of the membership to get.
  // Format: stores/{store}/memberships/{membership}
  // Required.
  string name = 1;
}

// ListMembershipsRequest is the request message for ListMemberships.
message ListMembershipsRequest {
  // parent is the resource name of the store for which to list memberships.
  // Format: stores/{store}
  // Required.
  string parent = 1;

  // page_size is the maximum number of memberships to return.
  // If unspecified, the server will choose a suitable number.
  int32 page_size = 2;

  // page_token contains an opaque string used to get the next page of
  // results. It is usually provided by the previous call to ListMemberships.
  // If unspecified, the first page will be returned.
  string page_token = 3;
}

// ListMembershipsResponse is the response message for ListMemberships.
message ListMembershipsResponse {
  // memberships contains the page of memberships.
  repeated Membership memberships = 1;

  // next_page_token contains an opaque string used to get the next page of
  // results. Provide this in a subsequent call to ListMemberships.
  // If this field is empty, there are no more pages.
  string next_page_token = 2;
}

// CreateMembershipRequest is the request message for CreateMembership.
message CreateMembershipRequest {
  // parent is the resource name of the store where the membership should be
  // created.
  // Format: stores/{store}
  // Required.
  string parent = 1;

  // membership is the membership to be created.
  // Required.
  Membership membership = 2;
}

// UpdateMembershipRequest is the request message for UpdateMembership.
message UpdateMembershipRequest {
  // membership is the updated membership. The `name` field will be used to identify which
  // membership to updated.
  // Required.
  Membership membership = 1;

  // update_mask contains the field mask specifying which fields to update. An
  // empty field mask will cause the entire resource to be updated.
  // Optional.
  google.protobuf.FieldMask update_mask = 2;
}

// DeleteMembershipRequest is the request message for DeleteMembership.
message DeleteMembershipRequest {
  // name specifies the resource name of the membership to delete.
  // Format: stores/{store}/memberships/{membership}
  // Required.
  string name = 1;
}

// GetProductRequest is the request message for GetProduct.
message GetProductRequest {
  // name is the resource name of the product to get.
  // Format: stores/{store}/products/{product}
  // Required.
  string name = 1;
}

// ListProductsRequest is the request message for ListProducts.
message ListProductsRequest {
  // parent is the resource name of the store for which to list products.
  // Format: stores/{store}
  // Required.
  string parent = 1;
  
  // page_size is the maximum number of products to return.
  // If unspecified, the server will choose a suitable number.
  int32 page_size = 2;

  // page_token contains an opaque string used to get the next page of
  // results. It is usually provided by the previous call to ListProducts.
  // If unspecified, the first page will be returned.
  string page_token = 3;
}

// ListProductsResponse is the response message for ListProducts.
message ListProductsResponse {
  // products contains the page of products.
  repeated Product products = 1;

  // next_page_token contains an opaque string used to get the next page of
  // results. Provide this in a subsequent call to ListProducts.
  // If this field is empty, there are no more pages.
  string next_page_token = 2;
}

// CreateProductRequest is the request message for CreateProduct.
message CreateProductRequest {
  // parent is the resource name of the store where the product should be
  // created.
  // Format: stores/{store}
  // Required.
  string parent = 1;

  // product is the product to be created.
  // Required.
  Product product = 2;
}

// UpdateProductRequest is the request message for UpdateProduct.
message UpdateProductRequest {
  // product is the updated product. The `name` field will be used to identify which
  // product to updated.
  // Required.
  Product product = 1;

  // update_mask contains the field mask specifying which fields to update. An
  // empty field mask will cause the entire resource to be updated.
  // Optional.
  google.protobuf.FieldMask update_mask = 2;
}

// DeleteProductRequest is the request message for DeleteProduct.
message DeleteProductRequest {
  // name specifies the resource name of the product to delete.
  // Format: products/{product}
  // Required.
  string name = 1;

  // force should be set to true if any associated resources (purchases, etc)
  // should also be deleted. If associated resources exist, and force is false,
  // the request will fail.
  bool force = 2;
}

// GetPurchaseRequest is the request message for GetPurchase.
message GetPurchaseRequest {
  // name is the resource name of the purchase to get.
  // Format: stores/{store}/purchases/{purchase}
  // Required.
  string name = 1;
}

// ListPurchasesRequest is the request message for ListPurchases.
message ListPurchasesRequest {
  // parent is the resource name of the store for which to list purchases.
  // Format: stores/{store}
  // Required.
  string parent = 1;

  // page_size is the maximum number of purchases to return.
  // If unspecified, the server will choose a suitable number.
  int32 page_size = 2;

  // page_token contains an opaque string used to get the next page of
  // results. It is usually provided by the previous call to ListPurchases.
  // If unspecified, the first page will be returned.
  string page_token = 3;
}

// ListPurchasesResponse is the response message for ListPurchases.
message ListPurchasesResponse {
  // purchases contains the page of purchases.
  repeated Purchase purchases = 1;

  // next_page_token contains an opaque string used to get the next page of
  // results. Provide this in a subsequent call to ListPurchases.
  // If this field is empty, there are no more pages.
  string next_page_token = 2;
}

// CreatePurchaseRequest is the request message for CreatePurchase.
message CreatePurchaseRequest {
  // parent is the resource name of the store where the purchase should be
  // created.
  // Format: stores/{store}
  // Required.
  string parent = 1;

  // purchase is the purchase to be created.
  // Required.
  Purchase purchase = 2;
}

// UpdatePurchaseRequest is the request message for UpdatePurchase.
message UpdatePurchaseRequest {
  // purchase is the updated purchase. The `name` field will be used to identify
  // which purchase to updated.
  // Required.
  Purchase purchase = 1;

  // update_mask contains the field mask specifying which fields to update. An
  // empty field mask will cause the entire resource to be updated.
  // Optional.
  google.protobuf.FieldMask update_mask = 2;
}

// DeletePurchaseRequest is the request message for DeletePurchase.
message DeletePurchaseRequest {
  // name specifies the resource name of the purchase to delete.
  // Format: stores/{store}/purchases/{purchase}
  // Required.
  string name = 1;
}

// GetPaymentRequest is the request message for GetPayment.
message GetPaymentRequest {
  // name is the resource name of the payment to get.
  // Format: stores/{store}/payments/{payment}
  // Required.
  string name = 1;
}

// ListPaymentsRequest is the request message for ListPayments.
message ListPaymentsRequest {
  // parent is the resource name of the store for which to list payments.
  // Format: stores/{store}
  // Required.
  string parent = 1;

  // page_size is the maximum number of payments to return.
  // If unspecified, the server will choose a suitable number.
  int32 page_size = 2;

  // page_token contains an opaque string used to get the next page of
  // results. It is usually provided by the previous call to ListPayments.
  // If unspecified, the first page will be returned.
  string page_token = 3;
}

// ListPaymentsResponse is the response message for ListPayments.
message ListPaymentsResponse {
  // payments contains the page of payments.
  repeated Payment payments = 1;

  // next_page_token contains an opaque string used to get the next page of
  // results. Provide this in a subsequent call to ListPayments.
  // If this field is empty, there are no more pages.
  string next_page_token = 2;
}

// CreatePaymentRequest is the request message for CreatePayment.
message CreatePaymentRequest {
  // parent is the resource name of the store where the payment should be
  // created.
  // Format: stores/{store}
  // Required.
  string parent = 1;

  // payment is the payment to be created.
  // Required.
  Payment payment = 2;
}

// UpdatePaymentRequest is the request message for UpdatePayment.
message UpdatePaymentRequest {
  // payment is the updated payment. The `name` field will be used to identify
  // which payment to updated.
  // Required.
  Payment payment = 1;

  // update_mask contains the field mask specifying which fields to update. An
  // empty field mask will cause the entire resource to be updated.
  // Optional.
  google.protobuf.FieldMask update_mask = 2;
}

// DeletePaymentRequest is the request message for DeletePayment.
message DeletePaymentRequest {
  // name specifies the resource name of the payment to delete.
  // Format: stores/{store}/payments/{payment}
  // Required.
  string name = 1;
}
