// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package streckuv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreckUClient is the client API for StreckU service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreckUClient interface {
	// AuthenticateUser authenticates a user by their email address and password.
	AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*User, error)
}

type streckUClient struct {
	cc grpc.ClientConnInterface
}

func NewStreckUClient(cc grpc.ClientConnInterface) StreckUClient {
	return &streckUClient{cc}
}

func (c *streckUClient) AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/saser.strecku.v1.StreckU/AuthenticateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreckUServer is the server API for StreckU service.
// All implementations must embed UnimplementedStreckUServer
// for forward compatibility
type StreckUServer interface {
	// AuthenticateUser authenticates a user by their email address and password.
	AuthenticateUser(context.Context, *AuthenticateUserRequest) (*User, error)
	mustEmbedUnimplementedStreckUServer()
}

// UnimplementedStreckUServer must be embedded to have forward compatible implementations.
type UnimplementedStreckUServer struct {
}

func (*UnimplementedStreckUServer) AuthenticateUser(context.Context, *AuthenticateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateUser not implemented")
}
func (*UnimplementedStreckUServer) mustEmbedUnimplementedStreckUServer() {}

func RegisterStreckUServer(s *grpc.Server, srv StreckUServer) {
	s.RegisterService(&_StreckU_serviceDesc, srv)
}

func _StreckU_AuthenticateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreckUServer).AuthenticateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saser.strecku.v1.StreckU/AuthenticateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreckUServer).AuthenticateUser(ctx, req.(*AuthenticateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreckU_serviceDesc = grpc.ServiceDesc{
	ServiceName: "saser.strecku.v1.StreckU",
	HandlerType: (*StreckUServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateUser",
			Handler:    _StreckU_AuthenticateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "saser/strecku/v1/strecku.proto",
}
